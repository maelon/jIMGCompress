{"version":3,"sources":["webpack:///jIMGCompress.js","webpack:///webpack/bootstrap f90f59b7857fdb547b29","webpack:///./src/jIMGCompress.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","scope","compress","file","option","callback","errorback","File","size","_option","finishCall","fr","FileReader","addEventListener","e","_originDataURL","target","result","fileName","_fileName","fileType","_fileType","fileSize","_fileSize","width","_width","height","_height","originFileSize","_originFileSize","originWidth","_originWidth","originHeight","_originHeight","blob","_blob","dataURL","_dataURL","originDataURL","readAsDataURL","_checkFileType","type","name","Blob","_compress","error","_throwError","msg","_error","_error2","addFileHeaderEnum","feature","ext","test","_fileTypeEnum","_fileExtEnum","quality","ffd8ffe*********","89504e470d0a1a0a","474946**********","424d************","image/jpeg","image/png","image/gif","image/bmp","buffer","data","DataView","bts","_loop","i","push","val","arguments","length","undefined","getUint8","toString","substring","typeFeature","join","s","regexp","RegExp","replace","_error3","readAsArrayBuffer","image","document","createElement","url","URL","createObjectURL","revokeObjectURL","img","naturalWidth","naturalHeight","oWidth","oHeight","parseInt","Math","floor","dataurl","_compressByCanvas","_dataURL2Blob","src","canvas","context","getContext","fillStyle","fillRect","drawImage","toDataURL","arr","split","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","Error","window","jIMGCompress"],"mappings":"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","file":"jIMGCompress.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/*===================================================================\n\t#    FileName: jIMGCompress.js\n\t#      Author: Maelon.J\n\t#       Email: maelon.j@gmail.com\n\t#  CreateTime: 2016-04-06 10:22\n\t# Description: 图片压缩工具\n\t===================================================================*/\n\t\n\t(function (scope) {\n\t\n\t    /**\n\t    * public\n\t    * file: 传入input的file对象\n\t    * option: {\n\t    *   width: 最大压缩宽度 默认600\n\t    *   height: 最大压缩高度 默认自适应(不设置或者为'auto')\n\t    *   quality: 压缩质量 默认0.9\n\t    *   limitSize: 最大图片容量(字节) 默认无限制(最小值为1024)\n\t    * }\n\t    * callback: 压缩完成回调\n\t    * errorback: 发生错误回调\n\t    *\n\t    * callback回调结果: {\n\t    *   fileName: 文件名\n\t    *   fileSize: 压缩后文件容量(字节)\n\t    *   width: 压缩后文件宽度\n\t    *   height: 压缩后文件高度\n\t    *   originFileSize: 原始图片容量(字节)\n\t    *   originWidth: 原始图片宽度\n\t    *   originHeight: 原始图片高度\n\t    *   blob: 压缩后文件blob对象，可以放在formdata提交\n\t    *   dataurl: 压缩后文件data URL\n\t    * }\n\t    *\n\t    * !!!!!注意!!!!!\n\t    * 文件最后全部转为image/jpeg格式\n\t    */\n\t    scope.compress = function (file, option, callback, errorback) {\n\t        if (file) {\n\t            if (file instanceof File) {\n\t                if (file.size) {\n\t                    (function () {\n\t                        scope._option = option;\n\t                        if (scope._option['quality'] > 1 || scope._option['quality'] < 0) {\n\t                            scope._option['quality'] = 0.9;\n\t                        }\n\t                        if (scope._option['limitSize'] < 1024) {\n\t                            scope._option['limitSize'] = 1024;\n\t                        }\n\t                        var finishCall = function finishCall() {\n\t                            var fr = new FileReader();\n\t                            fr.addEventListener('load', function (e) {\n\t                                scope._originDataURL = e.target.result;\n\t                                callback({\n\t                                    fileName: scope._fileName,\n\t                                    fileType: scope._fileType,\n\t                                    fileSize: scope._fileSize,\n\t                                    width: scope._width,\n\t                                    height: scope._height,\n\t                                    originFileSize: scope._originFileSize,\n\t                                    originWidth: scope._originWidth,\n\t                                    originHeight: scope._originHeight,\n\t                                    blob: scope._blob,\n\t                                    dataURL: scope._dataURL,\n\t                                    originDataURL: scope._originDataURL\n\t                                });\n\t                            });\n\t                            fr.readAsDataURL(file);\n\t                        };\n\t                        scope._checkFileType(file, function (type, name) {\n\t                            scope._fileType = type;\n\t                            scope._fileName = name;\n\t                            scope._originFileSize = file.size;\n\t                            var blob = new Blob([file], { type: type });\n\t                            scope._compress(blob, finishCall, errorback);\n\t                        }, function (error) {\n\t                            scope._throwError(error, errorback);\n\t                        });\n\t                    })();\n\t                } else {\n\t                    var error = {\n\t                        type: 'emptyfile',\n\t                        msg: 'file error: file content is empty'\n\t                    };\n\t                    scope._throwError(error, errorback);\n\t                }\n\t            } else {\n\t                var _error = {\n\t                    type: 'notfile',\n\t                    msg: 'argument type error: not a File type'\n\t                };\n\t                scope._throwError(_error, errorback);\n\t            }\n\t        } else {\n\t            var _error2 = {\n\t                type: 'nofile',\n\t                msg: 'argument error: file is null'\n\t            };\n\t            scope._throwError(_error2, errorback);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * public\n\t     * 添加头信息描述\n\t     * feature 16进制头信息，可用*\n\t     * type   类型\n\t     * ext    后缀名\n\t     */\n\t    scope.addFileHeaderEnum = function (feature, type, ext) {\n\t        if (typeof feature === 'string' && typeof type === 'string' && /image\\/\\w+/.test(type) && typeof ext === 'string') {\n\t            scope._fileTypeEnum[feature] = type;\n\t            scope._fileExtEnum[type] = ext;\n\t        }\n\t    };\n\t\n\t    scope._option = {\n\t        'width': 600,\n\t        'quality': 0.9\n\t    };\n\t    scope._fileName = ''; //文件名\n\t    scope._fileType = ''; //文件类型\n\t    scope._fileSize = 0; //压缩后文件容量(字节)\n\t    scope._width = 0; //压缩后文件宽度\n\t    scope._height = 0; //压缩后文件高度\n\t    scope._originFileSize = 0; //原始图片容量(字节)\n\t    scope._originWidth = 0; //原始图片宽度\n\t    scope._originHeight = 0; //原始图片高度\n\t    scope._blob = null; //压缩后文件blob对象，可以放在formdata提交\n\t    scope._dataURL = ''; //压缩后文件data URL\n\t    scope._originDataURL = ''; //原始文件data URL\n\t\n\t    /**\n\t     * 文件类型枚举\n\t     */\n\t    scope._fileTypeEnum = {\n\t        'ffd8ffe*********': 'image/jpeg',\n\t        '89504e470d0a1a0a': 'image/png',\n\t        '474946**********': 'image/gif',\n\t        '424d************': 'image/bmp'\n\t    };\n\t\n\t    /**\n\t    * 文件后缀名枚举\n\t    */\n\t    scope._fileExtEnum = {\n\t        'image/jpeg': 'jpg',\n\t        'image/png': 'png',\n\t        'image/gif': 'gif',\n\t        'image/bmp': 'bmp'\n\t    };\n\t\n\t    /**\n\t     * private\n\t     * 检测文件类型\n\t     */\n\t    scope._checkFileType = function (file, callback, errorback) {\n\t        if (file.type !== '') {\n\t            callback(file.type, file.name);\n\t        } else {\n\t            try {\n\t                var fr = new FileReader();\n\t                fr.addEventListener('load', function (e) {\n\t                    var buffer = e.target.result;\n\t\n\t                    //文件头信息判断文件类型，如果直接获取不到文件类型\n\t                    try {\n\t                        var data = new DataView(buffer, 0);\n\t                        var bts = [];\n\t                        //获取文件前8个字节，转成16进制字符串，并与fileTypeEnum匹配\n\t\n\t                        var _loop = function _loop(i) {\n\t                            bts.push(function () {\n\t                                var val = arguments.length <= 0 || arguments[0] === undefined ? '0' + data.getUint8(i).toString(16) : arguments[0];\n\t                                return val.substring(val.length - 2);\n\t                            }());\n\t                        };\n\t\n\t                        for (var i = 0; i < 8; i++) {\n\t                            _loop(i);\n\t                        }\n\t                        var typeFeature = bts.join('');\n\t                        var type = '';\n\t                        for (var s in scope._fileTypeEnum) {\n\t                            var regexp = new RegExp('^' + s.replace(/\\*/gi, '\\\\w') + '$', 'ig');\n\t                            if (regexp.test(typeFeature)) {\n\t                                type = scope._fileTypeEnum[s];\n\t                                break;\n\t                            }\n\t                        }\n\t                        if (type) {\n\t                            callback(type, file.name + '.' + scope._fileExtEnum[type]);\n\t                        } else {\n\t                            var error = {\n\t                                type: 'badfiletype',\n\t                                msg: 'file type error: cannot analysis file type'\n\t                            };\n\t                            scope._throwError(error, errorback);\n\t                        }\n\t                    } catch (e) {\n\t                        var _error3 = {\n\t                            type: 'apierror',\n\t                            msg: 'api error: not support DataView api'\n\t                        };\n\t                        scope._throwError(_error3, errorback);\n\t                    }\n\t                });\n\t                fr.readAsArrayBuffer(file);\n\t            } catch (e) {\n\t                var error = {\n\t                    type: 'apierror',\n\t                    msg: 'api error: not support FileReader api'\n\t                };\n\t                scope._throwError(error, errorback);\n\t            }\n\t        }\n\t    };\n\t\n\t    /**\n\t     * private\n\t     * 使用canvas压缩出jpg\n\t     */\n\t    scope._compress = function (blob, callback, errorback) {\n\t        try {\n\t            (function () {\n\t                scope._originFileSize = blob.size;\n\t                var image = document.createElement('img');\n\t                var url = URL.createObjectURL(blob);\n\t                image.addEventListener('load', function (e) {\n\t                    URL.revokeObjectURL(url);\n\t                    var img = e.target;\n\t                    scope._originWidth = img.naturalWidth;\n\t                    scope._originHeight = img.naturalHeight;\n\t                    var width = void 0;\n\t                    var height = void 0;\n\t                    var oWidth = scope._option['width'];\n\t                    var oHeight = scope._option['height'];\n\t                    if (oWidth !== undefined && oWidth !== 'auto' && (oHeight === undefined || oHeight === 'auto')) {\n\t                        //如果只设置了宽度\n\t                        width = parseInt(oWidth);\n\t                        scope._originWidth < width && (width = scope._originWidth);\n\t                        height = Math.floor(width * scope._originHeight / scope._originWidth);\n\t                    } else if (oHeight === undefined && oHeight !== 'auto' && (oWidth === undefined || oWidth === 'auto')) {\n\t                        //如果只设置了高度\n\t                        height = parseInt(oHeight);\n\t                        scope._originHeight < height && (height = scope._originHeight);\n\t                        width = Math.floor(height * scope._originWidth / scope._originHeight);\n\t                    } else if (oWidth !== undefined && oWidth !== 'auto' && oHeight !== undefined && oHeight !== 'auto') {\n\t                        //如果设置了宽度、高度\n\t                        width = parseInt(oWidth);\n\t                        height = parseInt(oHeight);\n\t                        if (width * scope._originHeight / scope._originWidth > height) {\n\t                            width = Math.floor(height * scope._originWidth / scope._originHeight);\n\t                            if (width > scope._originWidth) {\n\t                                width = scope._originWidth;\n\t                                height = scope._originHeight;\n\t                            }\n\t                        } else {\n\t                            height = Math.floor(width * scope._originHeight / scope._originWidth);\n\t                            if (height > scope._originHeight) {\n\t                                width = scope._originWidth;\n\t                                height = scope._originHeight;\n\t                            }\n\t                        }\n\t                    } else {\n\t                        width = scope._originWidth;\n\t                        height = scope._originHeight;\n\t                    }\n\t                    var dataurl = scope._compressByCanvas(img, width, height, scope._option['quality']);\n\t                    var blob = scope._dataURL2Blob(dataurl);\n\t                    while (blob.size > scope._option['limitSize']) {\n\t                        width = Math.floor(0.8 * width);\n\t                        height = Math.floor(0.8 * height);\n\t                        dataurl = scope._compressByCanvas(img, width, height, scope._option['quality']);\n\t                        blob = scope._dataURL2Blob(dataurl);\n\t                    }\n\t                    //压缩完成\n\t                    scope._fileSize = blob.size;\n\t                    scope._width = width;\n\t                    scope._height = height;\n\t                    scope._blob = blob;\n\t                    scope._dataURL = dataurl;\n\t                    callback('finish');\n\t                });\n\t                image.src = url;\n\t            })();\n\t        } catch (e) {\n\t            var error = {\n\t                type: 'apierror',\n\t                msg: 'api error: not support canvas or URL api'\n\t            };\n\t            scope._throwError(error, errorback);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * private\n\t     * 使用canvas进行压缩\n\t     */\n\t    scope._compressByCanvas = function (img, width, height, quality) {\n\t        var canvas = document.createElement('canvas');\n\t        canvas.width = width;\n\t        canvas.height = height;\n\t        var context = canvas.getContext('2d');\n\t        context.fillStyle = '#FFF';\n\t        context.fillRect(0, 0, canvas.width, canvas.height);\n\t        context.drawImage(img, 0, 0, canvas.width, canvas.height);\n\t        var dataurl = canvas.toDataURL('image/jpeg', quality);\n\t        return dataurl;\n\t    };\n\t\n\t    /**\n\t     * private\n\t     * 转data url为blob\n\t     */\n\t    scope._dataURL2Blob = function (dataurl) {\n\t        try {\n\t            var arr = dataurl.split(',');\n\t            var mime = arr[0].match(/:(.*?);/)[1];\n\t            var bstr = atob(arr[1]);\n\t            var n = bstr.length;\n\t            var u8arr = new Uint8Array(n);\n\t            while (n--) {\n\t                u8arr[n] = bstr.charCodeAt(n);\n\t            }\n\t            return new Blob([u8arr], { type: mime });\n\t        } catch (e) {\n\t            var error = {\n\t                type: 'apierror',\n\t                msg: 'api error: not support atob or Unit8Array api'\n\t            };\n\t            scope._throwError(error, errorback);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * private\n\t     * 抛出异常，或异常回调\n\t     */\n\t    scope._throwError = function () {\n\t        var error = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t        var errorback = arguments[1];\n\t\n\t        if (errorback && typeof errorback === 'function') {\n\t            errorback(error);\n\t        } else {\n\t            throw new Error(error['msg']);\n\t        }\n\t    };\n\t})(window.jIMGCompress || (window.jIMGCompress = {}));\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** jIMGCompress.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f90f59b7857fdb547b29\n **/","/*===================================================================\n#    FileName: jIMGCompress.js\n#      Author: Maelon.J\n#       Email: maelon.j@gmail.com\n#  CreateTime: 2016-04-06 10:22\n# Description: 图片压缩工具\n===================================================================*/\n\n((scope) => {\n\n    /**\n    * public\n    * file: 传入input的file对象\n    * option: {\n    *   width: 最大压缩宽度 默认600\n    *   height: 最大压缩高度 默认自适应(不设置或者为'auto')\n    *   quality: 压缩质量 默认0.9\n    *   limitSize: 最大图片容量(字节) 默认无限制(最小值为1024)\n    * }\n    * callback: 压缩完成回调\n    * errorback: 发生错误回调\n    *\n    * callback回调结果: {\n    *   fileName: 文件名\n    *   fileSize: 压缩后文件容量(字节)\n    *   width: 压缩后文件宽度\n    *   height: 压缩后文件高度\n    *   originFileSize: 原始图片容量(字节)\n    *   originWidth: 原始图片宽度\n    *   originHeight: 原始图片高度\n    *   blob: 压缩后文件blob对象，可以放在formdata提交\n    *   dataurl: 压缩后文件data URL\n    * }\n    *\n    * !!!!!注意!!!!!\n    * 文件最后全部转为image/jpeg格式\n    */\n    scope.compress = (file, option, callback, errorback) => {\n        if(file) {\n            if(file instanceof File) {\n                if(file.size) {\n                    scope._option = option;\n                    if(scope._option['quality'] > 1 || scope._option['quality'] < 0) {\n                        scope._option['quality'] = 0.9;\n                    }\n                    if(scope._option['limitSize'] < 1024) {\n                        scope._option['limitSize'] = 1024;\n                    }\n                    let finishCall = () => {\n                        let fr = new FileReader();\n                        fr.addEventListener('load', (e) => {\n                            scope._originDataURL = e.target.result;\n                            callback({\n                                fileName: scope._fileName,\n                                fileType: scope._fileType,\n                                fileSize: scope._fileSize,\n                                width: scope._width,\n                                height: scope._height,\n                                originFileSize: scope._originFileSize,\n                                originWidth: scope._originWidth,\n                                originHeight: scope._originHeight,\n                                blob: scope._blob,\n                                dataURL: scope._dataURL,\n                                originDataURL: scope._originDataURL\n                            });\n                        });\n                        fr.readAsDataURL(file);\n                    };\n                    scope._checkFileType(file, (type, name) => {\n                        scope._fileType = type;\n                        scope._fileName = name;\n                        scope._originFileSize = file.size;\n                        let blob = new Blob([file], { type: type });\n                        scope._compress(blob, finishCall, errorback);\n                    }, (error) => {\n                        scope._throwError(error, errorback);\n                    });\n                } else {\n                    let error ={\n                        type: 'emptyfile',\n                        msg: 'file error: file content is empty'\n                    };\n                    scope._throwError(error, errorback);\n                }\n            } else {\n                let error ={\n                    type: 'notfile',\n                    msg: 'argument type error: not a File type'\n                };\n                scope._throwError(error, errorback);\n            }\n        } else {\n            let error = {\n                type: 'nofile',\n                msg: 'argument error: file is null'\n            };\n            scope._throwError(error, errorback);\n        }\n    };\n\n    /**\n     * public\n     * 添加头信息描述\n     * feature 16进制头信息，可用*\n     * type   类型\n     * ext    后缀名\n     */\n    scope.addFileHeaderEnum = (feature, type, ext) => {\n        if(typeof feature === 'string' && typeof type === 'string' && /image\\/\\w+/.test(type) && typeof ext === 'string') {\n            scope._fileTypeEnum[feature] = type;\n            scope._fileExtEnum[type] = ext;\n        }\n    };\n\n    scope._option = {\n        'width': 600,\n        'quality': 0.9\n    };\n    scope._fileName = ''; //文件名\n    scope._fileType = ''; //文件类型\n    scope._fileSize = 0; //压缩后文件容量(字节)\n    scope._width = 0; //压缩后文件宽度\n    scope._height = 0; //压缩后文件高度\n    scope._originFileSize = 0; //原始图片容量(字节)\n    scope._originWidth = 0; //原始图片宽度\n    scope._originHeight = 0; //原始图片高度\n    scope._blob = null; //压缩后文件blob对象，可以放在formdata提交\n    scope._dataURL = ''; //压缩后文件data URL \n    scope._originDataURL = ''; //原始文件data URL \n\n    /**\n     * 文件类型枚举\n     */\n    scope._fileTypeEnum = {\n        'ffd8ffe*********': 'image/jpeg',\n        '89504e470d0a1a0a': 'image/png',\n        '474946**********': 'image/gif',\n        '424d************': 'image/bmp'\n    };\n\n    /**\n    * 文件后缀名枚举\n    */\n    scope._fileExtEnum = {\n        'image/jpeg': 'jpg',\n        'image/png': 'png',\n        'image/gif': 'gif',\n        'image/bmp': 'bmp'\n    };\n\n    /**\n     * private\n     * 检测文件类型\n     */\n    scope._checkFileType = (file, callback, errorback) => {\n        if(file.type !== '') {\n            callback(file.type, file.name);\n        } else {\n            try {\n                let fr = new FileReader();\n                fr.addEventListener('load', function (e) {\n                    let buffer = e.target.result;\n\n                    //文件头信息判断文件类型，如果直接获取不到文件类型\n                    try {\n                        var data = new DataView(buffer, 0);\n                        var bts = [];\n                        //获取文件前8个字节，转成16进制字符串，并与fileTypeEnum匹配\n                        for(let i = 0; i < 8; i++) {\n                            bts.push(((val = '0' + data.getUint8(i).toString(16)) => val.substring(val.length - 2))());\n                        }\n                        let typeFeature = bts.join('');\n                        let type = '';\n                        for(let s in scope._fileTypeEnum) {\n                            let regexp = new RegExp('^' + s.replace((/\\*/gi), '\\\\w') + '$', 'ig');\n                            if(regexp.test(typeFeature)) {\n                                type = scope._fileTypeEnum[s];\n                                break;\n                            }\n                        }\n                        if(type) {\n                            callback(type, file.name + '.' + scope._fileExtEnum[type]);\n                        } else {\n                            let error ={\n                                type: 'badfiletype',\n                                msg: 'file type error: cannot analysis file type'\n                            };\n                            scope._throwError(error, errorback);\n                        }\n                    } catch (e) {\n                        let error = {\n                            type: 'apierror',\n                            msg: 'api error: not support DataView api'\n                        };\n                        scope._throwError(error, errorback);\n                    }\n                });\n                fr.readAsArrayBuffer(file);\n            } catch (e) {\n                let error = {\n                    type: 'apierror',\n                    msg: 'api error: not support FileReader api'\n                };\n                scope._throwError(error, errorback);\n            }\n        }\n    };\n\n    /**\n     * private\n     * 使用canvas压缩出jpg\n     */\n    scope._compress = (blob, callback, errorback) => {\n        try {\n            scope._originFileSize = blob.size;\n            let image = document.createElement('img');\n            let url = URL.createObjectURL(blob);\n            image.addEventListener('load', (e) => {\n                URL.revokeObjectURL(url);\n                let img = e.target;\n                scope._originWidth = img.naturalWidth;\n                scope._originHeight = img.naturalHeight;\n                let width;\n                let height;\n                let oWidth = scope._option['width'];\n                let oHeight = scope._option['height'];\n                if(oWidth !== undefined && oWidth !== 'auto' && (oHeight === undefined || oHeight === 'auto')) {\n                    //如果只设置了宽度\n                    width = parseInt(oWidth);\n                    (scope._originWidth < width) && (width = scope._originWidth);\n                    height = Math.floor(width * scope._originHeight / scope._originWidth);\n                } else if(oHeight === undefined && oHeight !== 'auto' && (oWidth === undefined || oWidth === 'auto')) {\n                    //如果只设置了高度\n                    height = parseInt(oHeight);\n                    (scope._originHeight < height) && (height = scope._originHeight);\n                    width = Math.floor(height * scope._originWidth / scope._originHeight);\n                } else if(oWidth !== undefined && oWidth !== 'auto' && oHeight !== undefined && oHeight !== 'auto') {\n                    //如果设置了宽度、高度\n                    width = parseInt(oWidth);\n                    height = parseInt(oHeight);\n                    if(width * scope._originHeight / scope._originWidth > height) {\n                        width = Math.floor(height * scope._originWidth / scope._originHeight);\n                        if(width > scope._originWidth) {\n                            width = scope._originWidth;\n                            height = scope._originHeight;\n                        }\n                    } else {\n                        height = Math.floor(width * scope._originHeight / scope._originWidth);\n                        if(height > scope._originHeight) {\n                            width = scope._originWidth;\n                            height = scope._originHeight;\n                        }\n                    }\n                } else {\n                    width = scope._originWidth;\n                    height = scope._originHeight;\n                }\n                let dataurl = scope._compressByCanvas(img, width, height, scope._option['quality']);\n                let blob = scope._dataURL2Blob(dataurl);\n                while(blob.size > scope._option['limitSize']) {\n                    width = Math.floor(0.8 * width);\n                    height = Math.floor(0.8 * height);\n                    dataurl = scope._compressByCanvas(img, width, height, scope._option['quality']);\n                    blob = scope._dataURL2Blob(dataurl);\n                }\n                //压缩完成\n                scope._fileSize = blob.size;\n                scope._width = width;\n                scope._height = height;\n                scope._blob = blob;\n                scope._dataURL = dataurl;\n                callback('finish');\n            });\n            image.src = url;\n        } catch(e) {\n            let error = {\n                type: 'apierror',\n                msg: 'api error: not support canvas or URL api'\n            };\n            scope._throwError(error, errorback);\n        }\n    };\n\n    /**\n     * private\n     * 使用canvas进行压缩\n     */\n    scope._compressByCanvas = (img, width, height, quality) => {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        let context = canvas.getContext('2d');\n        context.fillStyle = '#FFF';\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.drawImage(img, 0, 0, canvas.width, canvas.height);\n        let dataurl = canvas.toDataURL('image/jpeg', quality);\n        return dataurl;\n    };\n\n    /**\n     * private\n     * 转data url为blob\n     */\n    scope._dataURL2Blob = (dataurl) => {\n        try {\n            let arr = dataurl.split(',');\n            let mime = arr[0].match(/:(.*?);/)[1];\n            let bstr = atob(arr[1]);\n            let n = bstr.length;\n            let u8arr = new Uint8Array(n);\n            while(n--){\n                u8arr[n] = bstr.charCodeAt(n);\n            }\n            return new Blob([u8arr], { type: mime });\n        } catch(e) {\n            let error = {\n                type: 'apierror',\n                msg: 'api error: not support atob or Unit8Array api'\n            };\n            scope._throwError(error, errorback);\n        }\n    };\n\n    /**\n     * private\n     * 抛出异常，或异常回调\n     */\n    scope._throwError = (error = {}, errorback) => {\n        if(errorback && typeof errorback === 'function') {\n            errorback(error);\n        } else {\n            throw new Error(error['msg']);\n        }\n    };\n\n})(window.jIMGCompress || (window.jIMGCompress = {}));\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/jIMGCompress.js\n **/"],"sourceRoot":""}